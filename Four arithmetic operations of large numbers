
\\1-大数加法
Key code:

#define U 40000
using namespace std;
char a[U],b[U];
int A[U],B[U];
int main(){
   int flagx,flagy,c,s,i,j,x,y;
   flagx=flagy=1;
  while(cin>>a>>b){
  	memset(A,0,sizeof(A));
  	memset(B,0,sizeof(B));
   x=strlen(a);
   y=strlen(b);
for(i=0;i<x;i++){
	if(a[i]!='0') flagx=0;
	A[i]=a[x-i-1]-'0';
}
for(i=0;i<y;i++){
	if(b[i]!='0')  flagy=0;
	B[i]=b[y-1-i]-'0';
}
if(flagx&&flagy)  printf("0\n");
   c=0;
   for(i=0;i<U;++i){
   	s=A[i]+B[i]+c;
   	A[i]=s%10;
   	c=s/10;
   }
   for(i=U-1;i>=0;i--){
   	if(A[i])  break;
   }
   for(j=i;j>=0;j--)
   printf("%d",A[j]);
   printf("\n");
}
   return 0;
}


\\2-大数减法
string sub(string a,string b)
{
    string c;
    bool ok=0;
    int lena=a.length(),lenb=b.length();
    int len=max(lena,lenb);
    for(int i=lena;i<len;i++) a="0"+a;
    for(int i=lenb;i<len;i++) b="0"+b;
    if(a<b)
    {
        string temp=a;
        a=b;
        b=temp;
        ok=1;
    }
    for(int i=len-1;i>=0;i--)
    {
        if(a[i]<b[i]) 
        {
            a[i-1]-=1;
            a[i]+=10;
        }
        char temp=a[i]-b[i]+'0';
        c=temp+c;
    }
    int pos=0;
    while(c[pos]=='0' && pos<len) pos++;
    if(pos==len) return "0"; 
    if(ok) return "-"+c.substr(pos);
    return c.substr(pos);
}



\\3-1.大数乘法

#define U 10000
string bigmul(string a,string b){
      string c="0",d="0",t;
      int aL,bL,resultL,x,g;
      int i,j,count;
      int A[U],B[U],result[U];
      if(a.length()<b.length()){
      	t=a;
      	a=b;
      	b=t;
	  }
	  aL=a.length();
	  bL=b.length();
	  resultL=aL+bL+1;
	  for(i=0;i<resultL;i++)
	  result[i]=0;
	  for(i=0;i<aL;i++)
	  A[i]=a[i]-'0';
	  for(i=0;i<bL;i++)
	  B[i]=b[i]-'0';
	  for(i=resultL-1;i>=resultL-aL;i--)
	  A[i]=A[i-(resultL-aL)];
	  for(i=0;i<resultL-aL;i++)  A[i]=0;
	  for(i=resultL-1;i>=resultL-bL;i--)
	  B[i]=B[i-(resultL-bL)];
	  for(i=0;i<resultL-bL;i++)   B[i]=0;
	  for(i=resultL-1;i>=resultL-bL;i--){
	  	g=i;
	  	x=0;
	  	for(j=resultL-1;j>=resultL-aL;j--){
	  		result[g]=B[i]*A[j]+result[g]+x;
	  		x=result[g]/10;
	  		result[g]%=10;
	  		g--;
		  }
		  if(x>0) result[g]+=x;
	  }
	  count=0;
	  for(i=0;i<resultL;i++){
	  	if(result[i]!=0) break;
	  	else count++;
	  }
	  for(i=0;i<resultL-count;i++)
	  result[i]=result[i+count];
	  for(i=1;i<resultL-count;i++)
	  c+=d;
	  for(i=0;i<resultL-count;i++)
	  c[i]=result[i]+'0';
	  return c;
}
int main(){
	string a,b,c;
	cin>>a>>b;
	c=bigmul(a,b);
	cout<<c<<endl;
	return 0;
}

\\3-2.大数乘法（大数x整数）
Key code:

string mulint(string s,int x)  
{
    reverse(s.begin(),s.end());
    int cmp=0;
    for(int i=0;i<s.size();i++)
    {
        cmp=(s[i]-'0')*x+cmp;
        s[i]=(cmp%10+'0');
        cmp/=10;
    }
    while(cmp)
    {
        s+=(cmp%10+'0');
        cmp/=10;
    }
    reverse(s.begin(),s.end());
    return s;
}

\\4-大数除法
string div(string s,int x) 
{
    int cmp=0,ok=0;
    string ans="";
    for(int i=0;i<s.size();i++)
    {
        cmp=(cmp*10+s[i]-'0');
        if(cmp>=x)
        {
            ok=1;
            ans+=(cmp/x+'0');
            cmp%=x;
        }
        else{
            if(ok==1) ans+='0';
        }
    }
    return ans;
}
